const { Client } = require("discord.js");
const client = new Client({ intents: 3276799 });
const Discord = require('discord.js');
const fs = require("fs");
const path = require("path");
// D√©finir la fonction saveRoles
function saveRoles(guild) {
  const rolesData = [];
  guild.roles.cache.forEach((role) => {
    rolesData.push({
      Id: rolesData.length + 1,
      NameRole: role.name,
      IdRole: role.id,
    });
  });
  const serverName = guild.name;
  const serverId = guild.id;
  const jsonData = JSON.stringify(
    { ServerName: serverName, serverId: serverId, RolesData: rolesData },
    null,
    2
  );
  const fileName = `./Roles/Roles_${serverName}.json`;
  fs.writeFileSync(fileName, jsonData);
}
// D√©finir la fonction CreateMembers
async function CreateMembers(guild) {
  // R√©cup√©rer les membres du serveur
  const members = guild.members.cache;

  // R√©cup√©rer les informations des membres
  const membersData = members.map((member) => ({
    Pseudo: member.user.username,
    Tag: member.user.tag,
    Id: member.user.id,
    DateArrivee: member.joinedAt.toLocaleDateString(),
    Commentaire: "",
    Role: member.roles.cache.map((role) => role.name),
    RolesId: [],
  }));

  // R√©cup√©rer les donn√©es des r√¥les sauvegard√©es
  const rolesFileName = `./Roles/Roles_${guild.name}.json`;
  let rolesData = [];
  try {
    const data = fs.readFileSync(rolesFileName);
    if (data.length > 0) {
      rolesData = JSON.parse(data).RolesData;
    }
  } catch (err) {
    console.error(err);
  }

  // Mettre √† jour les ID des r√¥les pour chaque membre
  membersData.forEach((member) => {
    member.RolesId = member.Role.map((roleName) => {
      const roleData = rolesData.find((role) => role.NameRole === roleName);
      return roleData ? roleData.Id : "";
    });
  });

  // Convertir les donn√©es des membres et des r√¥les en JSON
  const membersJson = JSON.stringify(membersData, null, 2);
  const rolesJson = JSON.stringify(rolesData, null, 2);

  // V√©rifier si le dossier pour le serveur existe
  const serverFolder = `./${guild.name}`;
  if (!fs.existsSync(serverFolder)) {
    fs.mkdirSync(serverFolder);
  }

  // V√©rifier si le fichier pour les membres existe
  const membersFileName = `${serverFolder}/Members_${guild.name}.json`;
  if (!fs.existsSync(membersFileName)) {
    // Cr√©er le fichier pour les membres
    const jsonData = JSON.stringify(
      { ServerName: guild.name, MembersData: membersData },
      null,
      2
    );
    fs.writeFileSync(membersFileName, jsonData);
  } else {
    // Mettre √† jour les donn√©es des membres dans le fichier
    const data = fs.readFileSync(membersFileName);
    const jsonData = JSON.parse(data);
    jsonData.MembersData = membersData;
    fs.writeFileSync(membersFileName, JSON.stringify(jsonData, null, 2));
  }
}
// D√©claration de la fonction ListRole
function ListRole(message ) {
  // R√©cup√©ration du serveur
  const guild = message.guild;

  // R√©cup√©ration de la liste des r√¥les en excluant le r√¥le @everyone
  const roles = guild.roles.cache.filter(role => role.name !== '@everyone');

  // Envoi d'un message pour chaque r√¥le avec une r√©action pouce lev√©
  roles.each(role => {
    // Cr√©ation du message
    const roleMessage = `R√¥le : ${role.name}`;

    // Envoi du message
    message.channel.send(roleMessage).then(sentMessage => {
      // Ajout de la r√©action de pouce lev√©
      sentMessage.react('üëç');

      // Cr√©ation du filtre pour la r√©action de l'utilisateur
      const filter = (reaction, user) => {
        return ['üëç'].includes(reaction.emoji.name) && user.id === message.author.id;
      };

      // Cr√©ation du collecteur de r√©actions
      const collector = sentMessage.createReactionCollector(filter, { time: 15000 });

      // √âv√©nement de collecte d'une r√©action
      collector.on('collect', (reaction, user) => {
        // V√©rification que l'utilisateur est bien celui qui a initi√© la commande
        if (user.id === message.author.id) {
          // Envoi d'un message de confirmation si l'utilisateur a r√©agi avec la bonne r√©action
          if (reaction.emoji.name === 'üëç') {
            message.channel.send('Role s√©lectionn√©.'+ `${role.name}`);

            // Appel de la fonction SelectMembers pour afficher la liste des membres avec le r√¥le s√©lectionn√©
            const roleName = role.name;
            SelectMembers(message, roleName);
            Trie(message, roleName);
            Commentaire(message, roleName); // Ajout de l'appel de la fonction Commentaire apr√®s Trie
          }
        }
      });
    });
  });

  const role = message.guild.roles.cache.find(r => r.name === roleName);
  if (!role) {
    message.channel.send(`Le r√¥le ${roleName} n'existe pas sur ce serveur.`);
    return;
  }
  const ServeurName = message.guild.name;
  message.channel.send(`Membres avec le r√¥le ${roleName} sur le serveur ${ServeurName} : \n${members}`);



  
  const now = Date.now();
  const members = role.members.map(member => {
    const memberDate = new Date(member.joinedTimestamp);
    const joinDate = `${memberDate.getDate().toString().padStart(2, '0')}/${(memberDate.getMonth()+1).toString().padStart(2, '0')}/${memberDate.getFullYear().toString().substring(2, 4)}`;
    const diffInDays = (now - member.joinedTimestamp) / (1000 * 60 * 60 * 24);
    const memberName = member.user.username;
    const memberAvatar = member.user.avatarURL();
    const memberTag = member.user.tag;

    return {
      name: memberName,
      tag: memberTag,
      avatar: memberAvatar,
      joinDate: joinDate,
      diffInDays: diffInDays,
    };
  });

  const serverFolderPath = `./${serverName}`;
  let membersData = {};
  try {
    const membersDataPath = `${serverFolderPath}/Members_${serverName}.json`;
    const membersDataFile = fs.readFileSync(membersDataPath);
    membersData = JSON.parse(membersDataFile);
  } catch (error) {
    console.log(`Erreur lors de la r√©cup√©ration des donn√©es des membres pour le serveur ${serverName}`);
    console.log(error);
  }

  for (const member of members) {
    let comment = '';
    if (member.name in membersData) {
      comment = membersData[member.name];
    }
    const memberMessage = `Membre : ${member.name}\nTag : ${member.tag}\nAvatar : ${member.avatar}\nArriv√©(e) le ${member.joinDate} (${Math.floor(member.diffInDays)} jours sur le serveur)\nCommentaire : ${comment}`;
    const sentMessage =  message.channel.send(memberMessage);
     sentMessage.react('üëç');

    const filter = (reaction, user) => {
      return ['üëç'].includes(reaction.emoji.name) && user.id === message.author.id;
    };

    const collector = sentMessage.createReactionCollector({ filter, time: 15000 });

    collector.on('collect', async (reaction) => {
      if (reaction.emoji.name === 'üëç') {
        Commentaire(message, roleName);
      }
    });
  }


  const serverName = message.guild.name;
  

  for (const member of members) {
    let comment = '';
    if (member.name in membersData) {
      comment = membersData[member.name];
    }
    const memberMessage = `Membre : ${member.name}\nTag : ${member.tag}\nAvatar : ${member.avatar}\nArriv√©(e) le ${member.joinDate} (${Math.floor(member.diffInDays)} jours sur le serveur)\nCommentaire : ${comment}`;
    const sentMessage =  message.channel.send(memberMessage);
     sentMessage.react('üëç');

    const filter = (reaction, user) => {
      return ['üëç'].includes(reaction.emoji.name) && user.id === message.author.id;
    };

    const collector = sentMessage.createReactionCollector({ filter, time: 15000 });

    collector.on('collect', async (reaction) => {
      if (reaction.emoji.name === 'üëç') {
        const filter2 = (m) => m.author.id === message.author.id;
        const sentMessage2 = await message.channel.send(`Entrez le commentaire pour ${member.name}`);
        const collectedMessage = await message.channel.awaitMessages(filter2, { max: 1, time: 30000, errors: ['time'] });
        const commentContent = collectedMessage.first().content;
        membersData[member.name] = commentContent;
        fs.writeFileSync(`${serverFolderPath}/Members_${serverName}.json`, JSON.stringify(membersData, null, 2));
        await message.channel.send(`Le commentaire pour ${member.name} a √©t√© enregistr√©.`);
      }
    });
  
  }}


  // Fonction pour afficher un membre avec ses commentaires
// Exporter la fonction CreateMembers
module.exports = {
  CreateMembers,
  saveRoles,
  CreateMembers,
  ListRole,
};
/*Ce code parcourt la liste des r√¥les et envoie un message pour chaque r√¥le avec une r√©action pouce lev√©.
 Le filtre est utilis√© pour s'assurer que seule la r√©action de l'utilisateur qui a initi√© la commande est prise
  en compte. 
  Le collecteur de r√©actions est utilis√© pour d√©tecter la r√©action de l'utilisateur et 
  envoyer un message de confirmation.

  La fonction Trie utilise la fonction SelectMembers pour r√©cup√©rer la liste des membres ayant un certain r√¥le.
   Ensuite, pour chaque membre, on calcule la diff√©rence en jours entre la date actuelle et
    la date d'arriv√©e sur le serveur (utilisant la propri√©t√© joinedTimestamp). 
    En fonction de cette diff√©rence, on ajoute le nom du membre √† la liste correspondante 
    (moins de 2 semaines, entre 2 semaines et 1 mois, plus d'un mois). Finalement, 
    on envoie la liste compl√®te dans le canal de texte.

Notez que cette fonction utilise la m√©thode joinedTimestamp qui renvoie la date d'arriv√©e du membre 
sur le serveur en tant que timestamp en millisecondes. La diff√©rence entre deux timestamps peut √™tre
 utilis√©e pour calculer la diff√©rence en jours.

*/
